POLICY PolLteOperator {
    GRANT lt  ON NumberValue  WHERE num1 < num2;
    GRANT lte ON NumberValue  WHERE num1 <= num2;

    GRANT lt  ON BooleanValue WHERE bool1 < bool2;
    GRANT lte ON BooleanValue WHERE bool1 <= bool2;

    GRANT lt  ON StringValue  WHERE str1 < str2;
    GRANT lte ON StringValue  WHERE str1 <= str2;
}

TEST PolLteOperatorTest{
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:0,          num2:0           };
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:0,          num2:1           };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:1,          num2:0           };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:1           };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:IGNORE      };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:UNKNOWN     };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:1                            };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE                       };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:UNKNOWN                      };
    DENY   lt  ON NumberValue POLICY PolLteOperator INPUT                     {                                   };
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:1,          num2:IGNORE      };
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:1           };
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:UNKNOWN     }; 
    GRANT  lt  ON NumberValue POLICY PolLteOperator INPUT                     { num1:UNKNOWN,    num2:IGNORE      };
    EXPECT 0.0 < num2  FOR lt ON NumberValue POLICY PolLteOperator INPUT      { num1:0,          num2:UNKNOWN     }; 
    EXPECT num1 < 0.0  FOR lt ON NumberValue POLICY PolLteOperator INPUT      { num1:UNKNOWN,    num2:0           };
    EXPECT num1 < num2 FOR lt ON NumberValue POLICY PolLteOperator INPUT      { num1:UNKNOWN,    num2:UNKNOWN     };

    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:0,          num2:0           };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:1,          num2:0           };
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:0,          num2:1           };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:1           };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:IGNORE      };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     {                  num2:UNKNOWN     };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:1                            };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE                       };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:UNKNOWN                      };
    DENY   lte ON NumberValue POLICY PolLteOperator INPUT                     {                                   };
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1 :1,         num2:IGNORE      };
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:1           };
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:IGNORE,     num2:UNKNOWN     }; 
    GRANT  lte ON NumberValue POLICY PolLteOperator INPUT                     { num1:UNKNOWN,    num2:IGNORE      };
    EXPECT 0.0 <= num2  FOR lte ON NumberValue POLICY PolLteOperator INPUT    { num1:0,          num2:UNKNOWN     }; 
    EXPECT num1 <= 0.0  FOR lte ON NumberValue POLICY PolLteOperator INPUT    { num1:UNKNOWN,    num2:0           };
    EXPECT num1 <= num2 FOR lte ON NumberValue POLICY PolLteOperator INPUT    { num1:UNKNOWN,    num2:UNKNOWN     };

    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:TRUE     };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2:FALSE    };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:FALSE    };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2:TRUE     };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:TRUE     };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:FALSE    };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:IGNORE   };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:UNKNOWN  };  
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE                       }; 
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE                      };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE                     }; 
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:UNKNOWN                    };
    DENY   lt  ON BooleanValue POLICY PolLteOperator INPUT                    {                                  }; 
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:IGNORE   };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2 :IGNORE  };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:TRUE     };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:FALSE    };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:IGNORE   };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:UNKNOWN  };
    GRANT  lt  ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:UNKNOWN,    bool2:IGNORE   }; 
    EXPECT TRUE < bool2  FOR  lt ON BooleanValue POLICY PolLteOperator INPUT  { bool1:TRUE,       bool2:UNKNOWN  };
    EXPECT FALSE < bool2 FOR  lt ON BooleanValue POLICY PolLteOperator INPUT  { bool1:FALSE,      bool2:UNKNOWN  };
    EXPECT bool1 < TRUE  FOR  lt ON BooleanValue POLICY PolLteOperator INPUT  { bool1:UNKNOWN,    bool2:TRUE     };
    EXPECT bool1 < FALSE FOR  lt ON BooleanValue POLICY PolLteOperator INPUT  { bool1:UNKNOWN,    bool2:FALSE    }; 
    EXPECT bool1 < bool2 FOR  lt ON BooleanValue POLICY PolLteOperator INPUT  { bool1:UNKNOWN,    bool2:UNKNOWN  };

    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:TRUE     };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2:FALSE    };
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:FALSE    };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2:TRUE     };
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:TRUE     };
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:FALSE    }; 
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:IGNORE   };
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    {                   bool2:UNKNOWN  };  
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE                       }; 
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE                      }; 
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE                     }; 
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:UNKNOWN                    };
    DENY   lte ON BooleanValue POLICY PolLteOperator INPUT                    {                                  };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:TRUE,       bool2:IGNORE   };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:FALSE,      bool2 :IGNORE  };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:TRUE     };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:FALSE    };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,     bool2:IGNORE   };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:IGNORE,      bool2:UNKNOWN };
    GRANT  lte ON BooleanValue POLICY PolLteOperator INPUT                    { bool1:UNKNOWN,     bool2:IGNORE  };
    EXPECT TRUE <= bool2  FOR lte ON BooleanValue POLICY PolLteOperator INPUT { bool1:TRUE,       bool2:UNKNOWN  };
    EXPECT FALSE <= bool2 FOR lte ON BooleanValue POLICY PolLteOperator INPUT { bool1:FALSE,      bool2:UNKNOWN  };
    EXPECT bool1 <= TRUE  FOR lte ON BooleanValue POLICY PolLteOperator INPUT { bool1:UNKNOWN,    bool2:TRUE     };
    EXPECT bool1 <= FALSE FOR lte ON BooleanValue POLICY PolLteOperator INPUT { bool1:UNKNOWN,    bool2:FALSE    }; 
    EXPECT bool1 <= bool2 FOR lte ON BooleanValue POLICY PolLteOperator INPUT { bool1:UNKNOWN,    bool2:UNKNOWN  }; 

    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      { str1:'A',          str2:'A'        };
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:'A',          str2:'B'        };
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      { str1:'B',          str2:'A'        };
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      {                    str2:'A'        };
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      {                    str2:IGNORE     };
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      {                    str2:UNKNOWN    };  
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      { str1:'A'                           }; 
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      { str1:IGNORE                        }; 
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      { str1:UNKNOWN                       }; 
    DENY   lt ON StringValue POLICY PolLteOperator INPUT                      {                                    };
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:'A',          str2:IGNORE     };
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:IGNORE,       str2:'A'        };
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:IGNORE,       str2:IGNORE     };
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:IGNORE,       str2:UNKNOWN    }; 
    GRANT  lt ON StringValue POLICY PolLteOperator INPUT                      { str1:UNKNOWN,      str2:IGNORE     };
    EXPECT 'A' < str2  FOR lt ON StringValue POLICY PolLteOperator INPUT      { str1:'A',          str2:UNKNOWN    }; 
    EXPECT str1 < 'A'  FOR lt ON StringValue POLICY PolLteOperator INPUT      { str1:UNKNOWN,      str2:'A'        };
    EXPECT str1 < str2 FOR lt ON StringValue POLICY PolLteOperator INPUT      { str1:UNKNOWN,      str2:UNKNOWN    };

    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:'A',          str2:'A'        };
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:'A',          str2:'B'        };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     { str1:'B',          str2:'A'        };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     {                    str2:'A'        };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     {                    str2:IGNORE     };  
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     {                    str2:UNKNOWN    };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     { str1:'A'                           };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     { str1:IGNORE                        };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     { str1:UNKNOWN                       };
    DENY   lte ON StringValue POLICY PolLteOperator INPUT                     {                                    };
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:'A',          str2:IGNORE     };
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:IGNORE,       str2:'A'        };
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:IGNORE,       str2:IGNORE     };
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:IGNORE,       str2:UNKNOWN    }; 
    GRANT  lte ON StringValue POLICY PolLteOperator INPUT                     { str1:UNKNOWN,      str2:IGNORE     };
    EXPECT 'A' <= str2  FOR lte ON StringValue POLICY PolLteOperator INPUT    { str1:'A',          str2:UNKNOWN    }; 
    EXPECT str1 <= 'A'  FOR lte ON StringValue POLICY PolLteOperator INPUT    { str1:UNKNOWN,      str2:'A'        };
    EXPECT str1 <= str2 FOR lte ON StringValue POLICY PolLteOperator INPUT    { str1:UNKNOWN,      str2:UNKNOWN    };
}

POLICY PolGteOperator {
    GRANT gt  ON NumberValue  WHERE num1 > num2;
    GRANT gte ON NumberValue  WHERE num1 >= num2;
   
    GRANT gt  ON BooleanValue WHERE bool1 > bool2;
    GRANT gte ON BooleanValue WHERE bool1 >= bool2;
   
    GRANT gt  ON StringValue  WHERE str1 > str2;
    GRANT gte ON StringValue  WHERE str1 >= str2;
}

TEST PolGteOperatorTest{
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:0,          num2:0           };
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:1,          num2:0           };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:0,          num2:1           };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:1           };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:IGNORE      };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:UNKNOWN     };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:1                            };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE                       };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:UNKNOWN                      };
    DENY   gt  ON NumberValue POLICY PolGteOperator INPUT                     {                                   };
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE,     num2:1           };
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:1,          num2:IGNORE      };
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE,     num2:UNKNOWN     }; 
    GRANT  gt  ON NumberValue POLICY PolGteOperator INPUT                     { num1:UNKNOWN,    num2:IGNORE      };
    EXPECT 0.0 > num2  FOR gt ON NumberValue POLICY PolGteOperator INPUT      { num1:0,          num2:UNKNOWN     }; 
    EXPECT num1 > 0.0  FOR gt ON NumberValue POLICY PolGteOperator INPUT      { num1:UNKNOWN,    num2:0           };
    EXPECT num1 > num2 FOR gt ON NumberValue POLICY PolGteOperator INPUT      { num1:UNKNOWN,    num2:UNKNOWN     };

    GRANT  gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:0,          num2:0           };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:0,          num2:1           };
    GRANT  gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:1,          num2:0           };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:1           };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:IGNORE      };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     {                  num2:UNKNOWN     };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:1                            };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE                       };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:UNKNOWN                      };
    DENY   gte ON NumberValue POLICY PolGteOperator INPUT                     {                                   };
    GRANT  gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE,     num2:1           };
    GRANT  gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:1,          num2:IGNORE      };
    GRANT  gte ON NumberValue POLICY PolGteOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  gte  ON NumberValue POLICY PolGteOperator INPUT                    { num1:IGNORE,     num2:UNKNOWN     }; 
    GRANT  gte  ON NumberValue POLICY PolGteOperator INPUT                    { num1:UNKNOWN,    num2:IGNORE      };
    EXPECT 0.0 >= num2  FOR gte ON NumberValue POLICY PolGteOperator INPUT    { num1:0,          num2:UNKNOWN     }; 
    EXPECT num1 >= 0.0  FOR gte ON NumberValue POLICY PolGteOperator INPUT    { num1:UNKNOWN,    num2:0           };
    EXPECT num1 >= num2 FOR gte ON NumberValue POLICY PolGteOperator INPUT    { num1:UNKNOWN,    num2:UNKNOWN     };

    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:TRUE     };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:FALSE    };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:TRUE     };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:FALSE    };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:TRUE     };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:FALSE    };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:IGNORE   };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:UNKNOWN  };  
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE                       }; 
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE                      };
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE                     }; 
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:UNKNOWN                    }; 
    DENY   gt  ON BooleanValue POLICY PolGteOperator INPUT                    {                                  };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2:TRUE     };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2 :FALSE   };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:IGNORE   };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:IGNORE   };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2:IGNORE   };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,      bool2:UNKNOWN };
    GRANT  gt  ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:UNKNOWN,     bool2:IGNORE  }; 
    EXPECT TRUE > bool2  FOR gt ON BooleanValue POLICY PolGteOperator INPUT   { bool1:TRUE,       bool2:UNKNOWN  };
    EXPECT FALSE > bool2 FOR gt ON BooleanValue POLICY PolGteOperator INPUT   { bool1:FALSE,      bool2:UNKNOWN  };
    EXPECT bool1 > TRUE  FOR gt ON BooleanValue POLICY PolGteOperator INPUT   { bool1:UNKNOWN,    bool2:TRUE     };
    EXPECT bool1 > FALSE FOR gt ON BooleanValue POLICY PolGteOperator INPUT   { bool1:UNKNOWN,    bool2:FALSE    };
    EXPECT bool1 > bool2 FOR gt ON BooleanValue POLICY PolGteOperator INPUT   { bool1:UNKNOWN,    bool2:UNKNOWN  };

    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:TRUE     };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:FALSE    };
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:TRUE     };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:FALSE    };
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:TRUE     };
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:FALSE    }; 
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:IGNORE   };
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    {                   bool2:UNKNOWN  };  
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE                       }; 
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE                      }; 
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE                     }; 
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:UNKNOWN                    };
    DENY   gte ON BooleanValue POLICY PolGteOperator INPUT                    {                                  };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2:TRUE     };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2 :FALSE   };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:TRUE,       bool2:IGNORE   };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:FALSE,      bool2:IGNORE   };
    GRANT  gte ON BooleanValue POLICY PolGteOperator INPUT                    { bool1:IGNORE,     bool2:IGNORE   };
    GRANT  gte  ON BooleanValue POLICY PolGteOperator INPUT                   { bool1:IGNORE,     bool2:UNKNOWN  };
    GRANT  gte  ON BooleanValue POLICY PolGteOperator INPUT                   { bool1:UNKNOWN,    bool2:IGNORE   }; 
    EXPECT TRUE >= bool2  FOR gte ON BooleanValue POLICY PolGteOperator INPUT { bool1:TRUE,       bool2:UNKNOWN  };
    EXPECT FALSE >= bool2 FOR gte ON BooleanValue POLICY PolGteOperator INPUT { bool1:FALSE,      bool2:UNKNOWN  };
    EXPECT bool1 >= TRUE  FOR gte ON BooleanValue POLICY PolGteOperator INPUT { bool1:UNKNOWN,    bool2:TRUE     };
    EXPECT bool1 >= FALSE FOR gte ON BooleanValue POLICY PolGteOperator INPUT { bool1:UNKNOWN,    bool2:FALSE    }; 
    EXPECT bool1 >= bool2 FOR gte ON BooleanValue POLICY PolGteOperator INPUT { bool1:UNKNOWN,    bool2:UNKNOWN  };

    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      { str1:'A',          str2:'A'        };
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:'B',          str2:'A'        };
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      { str1:'A',          str2:'B'        };
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      {                    str2:'A'        };
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      {                    str2:IGNORE     };
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      {                    str2:UNKNOWN    };  
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      { str1:'A'                           }; 
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      { str1:IGNORE                        }; 
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      { str1:UNKNOWN                       }; 
    DENY   gt ON StringValue POLICY PolGteOperator INPUT                      {                                    }; 
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:IGNORE,       str2:'A'        };
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:'A',          str2:IGNORE     };
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:IGNORE,       str2:IGNORE     };
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:IGNORE,       str2:UNKNOWN    }; 
    GRANT  gt ON StringValue POLICY PolGteOperator INPUT                      { str1:UNKNOWN,      str2:IGNORE     };
    EXPECT 'A' > str2  FOR gt ON StringValue POLICY PolGteOperator INPUT      { str1:'A',          str2:UNKNOWN    }; 
    EXPECT str1 > 'A'  FOR gt ON StringValue POLICY PolGteOperator INPUT      { str1:UNKNOWN,      str2:'A'        };
    EXPECT str1 > str2 FOR gt ON StringValue POLICY PolGteOperator INPUT      { str1:UNKNOWN,      str2:UNKNOWN    };

    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:'A',          str2:'A'        };
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:'B',          str2:'A'        };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     { str1:'A',          str2:'B'        };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     {                    str2:'A'        };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     {                    str2:IGNORE     };  
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     {                    str2:UNKNOWN    };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     { str1:'A'                           };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     { str1:IGNORE                        };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     { str1:UNKNOWN                       };
    DENY   gte ON StringValue POLICY PolGteOperator INPUT                     {                                    };
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:IGNORE,       str2:'A'        };
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:'A',          str2:IGNORE     };
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:IGNORE,       str2:IGNORE     };
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:IGNORE,       str2:UNKNOWN    }; 
    GRANT  gte ON StringValue POLICY PolGteOperator INPUT                     { str1:UNKNOWN,      str2:IGNORE     };
    EXPECT 'A' >= str2  FOR gte ON StringValue POLICY PolGteOperator INPUT    { str1:'A',          str2:UNKNOWN    }; 
    EXPECT str1 >= 'A'  FOR gte ON StringValue POLICY PolGteOperator INPUT    { str1:UNKNOWN,      str2:'A'        };
    EXPECT str1 >= str2 FOR gte ON StringValue POLICY PolGteOperator INPUT    { str1:UNKNOWN,      str2:UNKNOWN    };
}

POLICY PolEqOperator {
    GRANT eq  ON NumberValue  WHERE num1 = num2;
    GRANT neq ON NumberValue  WHERE num1 <> num2;

    GRANT eq  ON BooleanValue WHERE bool1 = bool2;
    GRANT neq ON BooleanValue WHERE bool1 <> bool2;

    GRANT eq  ON StringValue  WHERE str1 = str2;
    GRANT neq ON StringValue  WHERE str1 <> str2;
}
TEST PolEqOperatorTest {
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:1,          num2:0           };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:0,          num2:1           };
    GRANT  eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:0,          num2:0           };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:0                            };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE                       };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:UNKNOWN                      };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     {                   num2:0          };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     {                   num2:IGNORE     };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     {                   num2:UNKNOWN    };
    DENY   eq  ON NumberValue POLICY PolEqOperator INPUT                     {                                   };
    GRANT  eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:0,          num2:IGNORE      };
    GRANT  eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE,     num2:0           };
    GRANT  eq  ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  eq ON NumberValue POLICY PolEqOperator INPUT                      { num1:UNKNOWN,    num2:IGNORE      };
    GRANT  eq ON NumberValue POLICY PolEqOperator INPUT                      { num1:IGNORE,     num2:UNKNOWN     };
    EXPECT num1 = num2 FOR eq ON NumberValue POLICY PolEqOperator INPUT      { num1:UNKNOWN,    num2:UNKNOWN     };
    EXPECT num1 = 1.0  FOR eq ON NumberValue POLICY PolEqOperator INPUT      { num1:UNKNOWN,    num2:1           };
    EXPECT num2 = 1.0  FOR eq ON NumberValue POLICY PolEqOperator INPUT      { num1:1,          num2:UNKNOWN     };

    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:1,          num2:1           };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:0,          num2:1           };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:1,          num2:0           };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:0                            };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE                       };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:UNKNOWN                      };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     {                  num2:0           };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     {                  num2:IGNORE      };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     {                  num2:UNKNOWN     };
    DENY   neq ON NumberValue POLICY PolEqOperator INPUT                     {                                   };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:0,          num2:IGNORE      };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE,     num2:0           };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE,     num2:IGNORE      };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:UNKNOWN,    num2:IGNORE      };
    GRANT  neq ON NumberValue POLICY PolEqOperator INPUT                     { num1:IGNORE,     num2:UNKNOWN     };
    EXPECT num1 <> num2 FOR neq ON NumberValue POLICY PolEqOperator INPUT    { num1:UNKNOWN,    num2:UNKNOWN     };
    EXPECT num1 <> 1.0  FOR neq ON NumberValue POLICY PolEqOperator INPUT    { num1:UNKNOWN,    num2:1           };
    EXPECT num2 <> 1.0  FOR neq ON NumberValue POLICY PolEqOperator INPUT    { num1:1,          num2:UNKNOWN     };

    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,      bool2:FALSE      };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,     bool2:TRUE       };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,      bool2:TRUE       };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,     bool2:FALSE      };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    {                  bool2:TRUE       };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    {                  bool2:FALSE      };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    {                  bool2:IGNORE     };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    {                  bool2:UNKNOWN    };  
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE                        }; 
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE                       };
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE                      }; 
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:UNKNOWN                     }; 
    DENY   eq  ON BooleanValue POLICY PolEqOperator INPUT                    {                                   };   
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,      bool2:IGNORE     };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,     bool2:IGNORE     };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,    bool2:TRUE       };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,    bool2:FALSE      };
    GRANT  eq  ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,    bool2:IGNORE     };
    GRANT eq ON BooleanValue POLICY PolEqOperator INPUT                      { bool1:IGNORE,    bool2:UNKNOWN    };
    GRANT eq ON BooleanValue POLICY PolEqOperator INPUT                      { bool1:UNKNOWN,   bool2:IGNORE     };
    EXPECT bool1 = TRUE  FOR eq ON BooleanValue POLICY PolEqOperator INPUT   { bool1:UNKNOWN,   bool2:TRUE       };
    EXPECT bool1 = FALSE FOR eq ON BooleanValue POLICY PolEqOperator INPUT   { bool1:UNKNOWN,   bool2:FALSE      };
    EXPECT bool2 = TRUE  FOR eq ON BooleanValue POLICY PolEqOperator INPUT   { bool1:TRUE,      bool2:UNKNOWN    };
    EXPECT bool2 = FALSE FOR eq ON BooleanValue POLICY PolEqOperator INPUT   { bool1:FALSE,     bool2:UNKNOWN    };
    EXPECT bool1 = bool2 FOR eq ON BooleanValue POLICY PolEqOperator INPUT   { bool1:UNKNOWN,   bool2:UNKNOWN    };

    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,       bool2:FALSE    };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,      bool2:TRUE     };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,       bool2:TRUE     };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,      bool2:FALSE    };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    {                   bool2:TRUE     };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    {                   bool2:FALSE    };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    {                   bool2:IGNORE   };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    {                   bool2:UNKNOWN  };  
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE                       }; 
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE                      };
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE                     }; 
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:UNKNOWN                    }; 
    DENY   neq ON BooleanValue POLICY PolEqOperator INPUT                    {                                  };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:TRUE,       bool2:IGNORE   };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:FALSE,      bool2:IGNORE   };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,     bool2:TRUE     };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,     bool2:FALSE    };
    GRANT  neq ON BooleanValue POLICY PolEqOperator INPUT                    { bool1:IGNORE,     bool2:IGNORE   };
    GRANT neq ON BooleanValue POLICY PolEqOperator INPUT                     { bool1:IGNORE,     bool2:UNKNOWN  };
    GRANT neq ON BooleanValue POLICY PolEqOperator INPUT                     { bool1:UNKNOWN,    bool2:IGNORE   };
    EXPECT bool1 <> TRUE  FOR neq ON BooleanValue POLICY PolEqOperator INPUT { bool1:UNKNOWN,    bool2:TRUE     };
    EXPECT bool1 <> FALSE FOR neq ON BooleanValue POLICY PolEqOperator INPUT { bool1:UNKNOWN,    bool2:FALSE    };
    EXPECT bool2 <> TRUE  FOR neq ON BooleanValue POLICY PolEqOperator INPUT { bool1:TRUE,       bool2:UNKNOWN  };
    EXPECT bool2 <> FALSE FOR neq ON BooleanValue POLICY PolEqOperator INPUT { bool1:FALSE,      bool2:UNKNOWN  };
    EXPECT bool1 <> bool2 FOR neq ON BooleanValue POLICY PolEqOperator INPUT { bool1:UNKNOWN,    bool2:UNKNOWN  };

    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:'B'      };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:'B',          str2:'A'      };
    GRANT  eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:'A'      };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     {                    str2:'A'      };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     {                    str2:IGNORE   };  
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     {                    str2:UNKNOWN  };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:'A'                         };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE                      };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:UNKNOWN                     };
    DENY   eq  ON StringValue POLICY PolEqOperator INPUT                     {                                  };
    GRANT  eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:IGNORE   };
    GRANT  eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE,       str2:'A'      };
    GRANT  eq  ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE,       str2:IGNORE   };
    GRANT  eq ON StringValue POLICY PolEqOperator INPUT                      { str1:IGNORE,       str2:UNKNOWN  };
    GRANT  eq ON StringValue POLICY PolEqOperator INPUT                      { str1:UNKNOWN,      str2:IGNORE   };
    EXPECT str1 = 'A'  FOR eq ON StringValue POLICY PolEqOperator INPUT      { str1:UNKNOWN,      str2:'A'      };
    EXPECT str2 = 'A'  FOR eq ON StringValue POLICY PolEqOperator INPUT      { str1:'A',          str2:UNKNOWN  };
    EXPECT str1 = str2 FOR eq ON StringValue POLICY PolEqOperator INPUT      { str1:UNKNOWN,      str2:UNKNOWN  };
    
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:'A'      };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:'B'      };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:'B',          str2:'A'      };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     {                    str2:'A'      };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     {                    str2:IGNORE   };  
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     {                    str2:UNKNOWN  };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     { str1:'A'                         };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE                      };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     { str1:UNKNOWN                     };
    DENY   neq ON StringValue POLICY PolEqOperator INPUT                     {                                  };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:'A',          str2:IGNORE   };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE,       str2:'A'      };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE,       str2:IGNORE   };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:IGNORE,       str2:UNKNOWN  };
    GRANT  neq ON StringValue POLICY PolEqOperator INPUT                     { str1:UNKNOWN,      str2:IGNORE   };
    EXPECT str1 <> 'A'  FOR neq ON StringValue POLICY PolEqOperator INPUT    { str1:UNKNOWN,      str2:'A'      };
    EXPECT str2 <> 'A'  FOR neq ON StringValue POLICY PolEqOperator INPUT    { str1:'A',          str2:UNKNOWN  };
    EXPECT str1 <> str2 FOR neq ON StringValue POLICY PolEqOperator INPUT    { str1:UNKNOWN,      str2:UNKNOWN  };
}